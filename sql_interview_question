create table icc_world_cup
(
Team_1 Varchar(20),
Team_2 Varchar(20),
Winner Varchar(20)
);
INSERT INTO icc_world_cup values('India','SL','India');
INSERT INTO icc_world_cup values('SL','Aus','Aus');
INSERT INTO icc_world_cup values('SA','Eng','Eng');
INSERT INTO icc_world_cup values('Eng','NZ','NZ');
INSERT INTO icc_world_cup values('Aus','India','India');

select * from icc_world_cup;

select team_name,count(1) as total_matches, sum(win_flag) as total_win_matches, (count(1)- sum(win_flag)) as total_lost_matches 
from
(select team_1 as team_name, 
case when Team_1 = Winner then 1 else 0 end as win_flag
from icc_world_cup
UNION All
select team_2 as team_name, 
case when Team_2 = Winner then 1 else 0 end as win_flag
from icc_world_cup) A 
group by team_name

input		
		
TEAM1	TEAM2	Winner
India	SL	India
SL	Aug	Aus
SA	Eng	Eng
Eng	Nz	NZ
Aus	India	India



	Output		
			
Team_name	Match_played	Wins	Loss
India	2	2	0
SL	2	0	2
SA	1	0	1
Eng	2	1	1
Aus	1	1	1
NZ	1	1	0


===========================================================
Meesho Interview Question

create table products
(
product_id varchar(20) ,
cost int
);
insert into products values ('P1',200),('P2',300),('P3',500),('P4',800);

create table customer_budget
(
customer_id int,
budget int
);

insert into customer_budget values (100,400),(200,800),(300,1500);
with cte as(
select *,
sum(cost) over(order by cost) as cumm_cost
from products)

select cb.customer_id,cb.budget,count(1) as total_prod,group_concat(cte.product_id) as products
from customer_budget cb
LEFT join cte on cte.cumm_cost<cb.budget
group by customer_id,budget

=======================================================================

Upler question : Here there are seniors and Juniors we need to select them but the budget is 50000 so first select seniors and in remaining 
cost select juniors. 

Create table candidates(
id int primary key,
positions varchar(10) not null,
salary int not null);

test case 1:
insert into candidates values(1,'junior',5000);
insert into candidates values(2,'junior',7000);
insert into candidates values(3,'junior',7000);
insert into candidates values(4,'senior',10000);
insert into candidates values(5,'senior',30000);
insert into candidates values(6,'senior',20000);

test case 2:
insert into candidates values(20,'junior',10000);
insert into candidates values(30,'senior',15000);
insert into candidates values(40,'senior',30000);

test case 3:
insert into candidates values(1,'junior',15000);
insert into candidates values(2,'junior',15000);
insert into candidates values(3,'junior',20000);
insert into candidates values(4,'senior',60000);

test case 4:
insert into candidates values(10,'junior',10000);
insert into candidates values(40,'junior',10000);
insert into candidates values(20,'senior',15000);
insert into candidates values(30,'senior',30000);
insert into candidates values(50,'senior',15000);

with cte_sum_sal as(
select *,
sum(salary) over(partition by positions order by salary,id) as sum_salary
from candidates),

cte_senior as(
select count(*) as seniors, ifnull(sum(salary),0) as s_salary
from cte_sum_sal
where sum_salary<=50000 and positions='senior'),

cte_junior as(
select count(*) as juniors
from cte_sum_sal 
where positions='junior' and sum_salary <=50000-(select s_salary from cte_senior))
    
select seniors,juniors from cte_junior,cte_senior;
